/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package hardware.pelicano;

public class SMClass {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SMClass(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SMClass obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(SMClass obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        PelicanoControlJNI.delete_SMClass(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class StateMachine_t {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected StateMachine_t(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(StateMachine_t obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected static long swigRelease(StateMachine_t obj) {
      long ptr = 0;
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new RuntimeException("Cannot release ownership as memory is not owned");
        ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.delete();
      }
      return ptr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          PelicanoControlJNI.delete_SMClass_StateMachine_t(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setCurrState(SMClass.State_t value) {
      PelicanoControlJNI.SMClass_StateMachine_t_CurrState_set(swigCPtr, this, value.swigValue());
    }
  
    public SMClass.State_t getCurrState() {
      return SMClass.State_t.swigToEnum(PelicanoControlJNI.SMClass_StateMachine_t_CurrState_get(swigCPtr, this));
    }
  
    public StateMachine_t() {
      this(PelicanoControlJNI.new_SMClass_StateMachine_t(), true);
    }
  
  }

  public SMClass(PelicanoClass _PelicanoClass_p) {
    this(PelicanoControlJNI.new_SMClass(PelicanoClass.getCPtr(_PelicanoClass_p), _PelicanoClass_p), true);
  }

  public void setSM(SMClass.StateMachine_t value) {
    PelicanoControlJNI.SMClass_SM_set(swigCPtr, this, SMClass.StateMachine_t.getCPtr(value), value);
  }

  public SMClass.StateMachine_t getSM() {
    long cPtr = PelicanoControlJNI.SMClass_SM_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SMClass.StateMachine_t(cPtr, false);
  }

  public void setLS(SMClass.StateMachine_t value) {
    PelicanoControlJNI.SMClass_LS_set(swigCPtr, this, SMClass.StateMachine_t.getCPtr(value), value);
  }

  public SMClass.StateMachine_t getLS() {
    long cPtr = PelicanoControlJNI.SMClass_LS_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SMClass.StateMachine_t(cPtr, false);
  }

  public void setEvento(SMClass.Event_t value) {
    PelicanoControlJNI.SMClass_Evento_set(swigCPtr, this, value.swigValue());
  }

  public SMClass.Event_t getEvento() {
    return SMClass.Event_t.swigToEnum(PelicanoControlJNI.SMClass_Evento_get(swigCPtr, this));
  }

  public void setEstado(SMClass.State_t value) {
    PelicanoControlJNI.SMClass_Estado_set(swigCPtr, this, value.swigValue());
  }

  public SMClass.State_t getEstado() {
    return SMClass.State_t.swigToEnum(PelicanoControlJNI.SMClass_Estado_get(swigCPtr, this));
  }

  public void InitStateMachine() {
    PelicanoControlJNI.SMClass_InitStateMachine(swigCPtr, this);
  }

  public int StateMachineRun(SMClass.Event_t Event) {
    return PelicanoControlJNI.SMClass_StateMachineRun(swigCPtr, this, Event.swigValue());
  }

  public int RunCheck() {
    return PelicanoControlJNI.SMClass_RunCheck(swigCPtr, this);
  }

  public int RunReset() {
    return PelicanoControlJNI.SMClass_RunReset(swigCPtr, this);
  }

  public int RunClean() {
    return PelicanoControlJNI.SMClass_RunClean(swigCPtr, this);
  }

  public String StateMachineGetStateName(SMClass.State_t State) {
    return PelicanoControlJNI.SMClass_StateMachineGetStateName(swigCPtr, this, State.swigValue());
  }

  public final static class State_t {
    public final static SMClass.State_t ST_IDLE = new SMClass.State_t("ST_IDLE");
    public final static SMClass.State_t ST_CONNECT = new SMClass.State_t("ST_CONNECT");
    public final static SMClass.State_t ST_CHECK = new SMClass.State_t("ST_CHECK");
    public final static SMClass.State_t ST_ENABLE = new SMClass.State_t("ST_ENABLE");
    public final static SMClass.State_t ST_POLLING = new SMClass.State_t("ST_POLLING");
    public final static SMClass.State_t ST_CLEANBOWL = new SMClass.State_t("ST_CLEANBOWL");
    public final static SMClass.State_t ST_RESET = new SMClass.State_t("ST_RESET");
    public final static SMClass.State_t ST_ERROR = new SMClass.State_t("ST_ERROR");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static State_t swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + State_t.class + " with value " + swigValue);
    }

    private State_t(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private State_t(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private State_t(String swigName, State_t swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static State_t[] swigValues = { ST_IDLE, ST_CONNECT, ST_CHECK, ST_ENABLE, ST_POLLING, ST_CLEANBOWL, ST_RESET, ST_ERROR };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Event_t {
    public final static SMClass.Event_t EV_ANY = new SMClass.Event_t("EV_ANY");
    public final static SMClass.Event_t EV_SUCCESS_CONN = new SMClass.Event_t("EV_SUCCESS_CONN");
    public final static SMClass.Event_t EV_CALL_POLLING = new SMClass.Event_t("EV_CALL_POLLING");
    public final static SMClass.Event_t EV_CHECK = new SMClass.Event_t("EV_CHECK");
    public final static SMClass.Event_t EV_TRASH = new SMClass.Event_t("EV_TRASH");
    public final static SMClass.Event_t EV_READY = new SMClass.Event_t("EV_READY");
    public final static SMClass.Event_t EV_FINISH_POLL = new SMClass.Event_t("EV_FINISH_POLL");
    public final static SMClass.Event_t EV_POLL = new SMClass.Event_t("EV_POLL");
    public final static SMClass.Event_t EV_EMPTY = new SMClass.Event_t("EV_EMPTY");
    public final static SMClass.Event_t EV_LOOP = new SMClass.Event_t("EV_LOOP");
    public final static SMClass.Event_t EV_ERROR = new SMClass.Event_t("EV_ERROR");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Event_t swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Event_t.class + " with value " + swigValue);
    }

    private Event_t(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Event_t(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Event_t(String swigName, Event_t swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Event_t[] swigValues = { EV_ANY, EV_SUCCESS_CONN, EV_CALL_POLLING, EV_CHECK, EV_TRASH, EV_READY, EV_FINISH_POLL, EV_POLL, EV_EMPTY, EV_LOOP, EV_ERROR };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
